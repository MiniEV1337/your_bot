from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from ..keyboards import (
    get_main_menu,
    get_settings_menu,
    get_subscription_menu,
    get_category_selector
)
from bot.user_manager import (
    set_subscription,
    get_subscription,
    toggle_night_news,
    save_favorites
)
from database import Session, User
import os

router = Router()
ADMIN_ID = os.getenv("ADMIN_ID")

user_temp_selection: dict[int, list[str]] = {}

class CategorySelect(StatesGroup):
    selecting = State()

class Broadcast(StatesGroup):
    waiting_for_photo = State()
    waiting_for_caption = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    is_admin = str(message.from_user.id) == str(ADMIN_ID)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_main_menu() if not is_admin else get_settings_menu(is_admin=True)
    )

@router.callback_query(F.data.in_([
    "politics", "technology", "sports", "economy", "culture", "world",
    "science", "gaming", "cinema", "medicine"
]))
async def handle_category(callback: CallbackQuery):
    category = callback.data
    await callback.message.answer(f"üîé –ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: *{category}*")
    await callback.answer()

@router.callback_query(F.data == "open_settings")
async def open_settings(callback: CallbackQuery):
    is_admin = str(callback.from_user.id) == str(ADMIN_ID)
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_menu(is_admin))
    await callback.answer()

@router.callback_query(F.data == "subscription")
async def open_subscription_menu(callback: CallbackQuery):
    await callback.message.edit_text("üíé –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=get_subscription_menu())
    await callback.answer()

@router.callback_query(F.data.in_(["subscribe_1", "subscribe_2"]))
async def handle_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    level = 1 if callback.data == "subscribe_1" else 2
    set_subscription(user_id, level)
    await callback.message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è {level} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    await callback.answer()

@router.callback_query(F.data == "toggle_night")
async def toggle_night_news_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    new_state = toggle_night_news(user_id)
    message = "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–æ—á—å—é." if new_state \
        else "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –¥–Ω—ë–º."
    await callback.message.answer(message)
    await callback.answer()

@router.callback_query(F.data == "my_stats")
async def show_user_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    level = get_subscription(user_id)
    await callback.message.answer(f"üìä –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: —É—Ä–æ–≤–µ–Ω—å {level}\n(–û—Å—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ.)")
    await callback.answer()

@router.callback_query(F.data.in_(["back_to_main", "back_to_settings"]))
async def go_back(callback: CallbackQuery):
    is_admin = str(callback.from_user.id) == str(ADMIN_ID)
    if callback.data == "back_to_main":
        await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    elif callback.data == "back_to_settings":
        await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_menu(is_admin))
    await callback.answer()

@router.callback_query(F.data == "select_favorites")
async def begin_category_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    level = get_subscription(user_id)
    limit = 3 if level == 1 else 6
    selected = []
    user_temp_selection[user_id] = selected
    await state.set_state(CategorySelect.selecting)
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ {limit} –ª—é–±–∏–º—ã—Ö —Ç–µ–º:",
        reply_markup=get_category_selector(selected, limit)
    )
    await callback.answer()

@router.callback_query(CategorySelect.selecting, F.data.startswith("toggle_cat:"))
async def toggle_category(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    code = callback.data.split(":")[1]
    selected = user_temp_selection.get(user_id, [])
    level = get_subscription(user_id)
    limit = 3 if level == 1 else 6

    if code in selected:
        selected.remove(code)
    elif len(selected) < limit:
        selected.append(code)

    user_temp_selection[user_id] = selected
    await callback.message.edit_reply_markup(reply_markup=get_category_selector(selected, limit))
    await callback.answer()

@router.callback_query(CategorySelect.selecting, F.data == "save_categories")
async def save_selected_categories(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    selected = user_temp_selection.get(user_id, [])
    save_favorites(user_id, selected)
    await state.clear()
    await callback.message.edit_text("‚úÖ –¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=get_settings_menu())
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) != str(ADMIN_ID):
        await callback.message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await state.set_state(Broadcast.waiting_for_photo)
    await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (jpg/png)")
    await callback.answer()

@router.message(Broadcast.waiting_for_photo, F.photo)
async def receive_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(Broadcast.waiting_for_caption)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ (–æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)")

@router.message(Broadcast.waiting_for_caption)
async def receive_caption_and_send(message: Message, state: FSMContext):
    bot = message.bot
    data = await state.get_data()
    photo_id = data.get("photo")
    caption = message.text
    count = 0

    session = Session()
    for user in session.query(User).all():
        try:
            await bot.send_photo(user.telegram_id, photo_id, caption=caption)
            count += 1
        except Exception:
            continue
    session.close()
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()
